var previousQty, shoppingCart = {
    shoppingCartOptions: {
        targetElementSelector: "",
        articleListElementSelector: "",
        totalsElementSelector: "",
        disableQuantity: !1,
        disableRemove: !1,
        disableCoupon: !1,
        purchaseWizardMode: !0
    },
    changed: !1,
    haveDiscount: !1,
    goToCheckoutClicked: !1,
    translations: function() {
        return typeof shoppingCartTranslations != "undefined" ? shoppingCartTranslations : {
            updateQuantityErrorMessage: "Attenzione! l'articolo non può essere modificato, leggi attentamente il messaggio d'errore presente sull'articolo",
            removeArticleConfirmMessage: "Rimuovere l'articolo [ArticleName] dal carrello?",
            emptyCartNotPermitted: "ATTENZIONE! non è possibile eliminare tutti i prodotti dal tuo carrello durante la procedura di acquisto!",
            invalidCoupon: "Codice coupon non valido!",
            couponRemovalError: "Non è possibile rimuovere il coupon",
            removeCouponConfirmMessage: "Rimuovere il coupon?",
            removePointsConfirmMessage: "Rimuovere i punti credito?",
            computeTotals: "Ricalcolo Totali"
        }
    },
    initCart: function(n) {
        this.shoppingCartOptions = n
    },
    setTranslations: function(n) {
        this.translations = n
    },
    isValid: function() {
        var n = shoppingCart.getJquery(),
            t = n("#ShoppingCartCheckResult").val();
        return t === "1"
    },
    updateCartQuantityNumber: function() {
        shoppingCartAPI.getCartArticlesQuantity && typeof shoppingCartAPI.getCartArticlesQuantity == "function" && shoppingCartMenu.refreshCartArticlesQuantity && shoppingCartMenu.refreshCartArticlesQuantity()
    },
    bindEvent: function() {
        var t = this,
            i = !1,
            r = !1,
            n = shoppingCart.getJquery();
        this.shoppingCartOptions.disableQuantity && (i = this.shoppingCartOptions.disableQuantity);
        this.shoppingCartOptions.disableRemove && (r = this.shoppingCartOptions.disableRemove);
        i && n("._cart-qty-button").parent().addClass("disabled");
        r && n("._cart-remove-article").addClass("dn");
        n("._cart-article-container").each(function() {
            var i = n(this).attr("cart-item-id"),
                r = n(this).find("._cart-qty-input"),
                f = n(this).find("._cart-fee-amb-button"),
                u = n(this);
            n(this).find("._enable-remove").length > 0 && n(this).find("._cart-remove-article").removeClass("dn");
            n(this).find("._enable-quantity").length > 0 && n(this).find(".qty").removeClass("disabled");
            n(this).find("._cart-qty-button").click(function() {
                var u = r.val(),
                    f = r.attr("max-quantity"),
                    o, s, e;
                f = isNaN(f) || f === "" ? 1e4 : parseInt(f);
                n(this).hasClass("add") && u < f && u++;
                n(this).hasClass("remove") && u > 1 && u--;
                u === f ? n(this).parent().children(".add").hide() : n(this).parent().children(".add").show();
                o = n(this).data("seller-id");
                s = n("._cart-article-container[data-seller-id=" + o + "]").length > 1;
                r.val() !== u && (e = {
                    Quantity: u,
                    ShoppingCartItemId: i
                }, r.attr("uom") !== "1" ? shoppingCartAPI.updateQuantity(e, function(n) {
                    s ? t.updateAll() : t.updateQuantitySuccess(n)
                }, t.updateQuantityFail) : shoppingCartAPI.updateQuantity(e, function(n) {
                    t.updateQuantitySuccess(n);
                    t.updateAll()
                }, t.updateQuantityFail))
            });
            n(this).find("._qty-input").on("focus", function() {
                previousQty = $(this).val()
            }).change(function() {
                var s = t.getAmbassadorShippingChangeWarnAlert(),
                    u = $(this).val(),
                    e, h, c, o, f;
                u = isNaN(u) || u === "" ? 1 : parseInt(u);
                e = r.attr("max-quantity");
                e = isNaN(e) || e === "" ? 1e4 : parseInt(e);
                h = n(this).data("seller-id");
                c = n("._cart-article-container[data-seller-id=" + h + "]").length > 1;
                r.val() !== u && (o = {
                    Quantity: u,
                    ShoppingCartItemId: i
                }, u >= 10 ? $("#txt-" + i).is(":visible") || ($("#txt-" + i).val(u).show(), $(".qtyUpDown").show(), $("#select-" + i).find("select").val(u), $("#select-" + i).hide()) : $("#select-" + i).is(":visible") || ($("#txt-" + i).val(10).hide(), $(".qtyUpDown").hide(), $("#select-" + i).find("select").val(u), $("#select-" + i).show()), r.attr("uom") !== "1" ? (f = function() {
                    shoppingCartAPI.updateQuantity(o, function(n) {
                        c ? t.show(t.shoppingCartOptions.targetElementSelector, function() {
                            t.purchaseWizardDialog.hide();
                            t.showWizardPaymentModule();
                            t.updateCartQuantityNumber()
                        }) : t.updateQuantitySuccess(n);
                        fixedShippingPrice = ""
                    }, t.updateQuantityFail)
                }, fixedShippingPrice.length != 0 ? Confirm(s, null, f, function() {
                    $("#txt-" + i).val(previousQty);
                    $("#select-" + i).find("select").val(previousQty)
                }) : f()) : (f = function() {
                    shoppingCartAPI.updateQuantity(o, function(n) {
                        t.updateQuantitySuccess(n);
                        t.show(t.shoppingCartOptions.targetElementSelector, function() {
                            t.purchaseWizardDialog.hide();
                            t.showWizardPaymentModule()
                        });
                        fixedShippingPrice = ""
                    }, t.updateQuantityFail)
                }, fixedShippingPrice.length != 0 ? Confirm(s, null, f, function() {
                    $("#txt-" + i).val(previousQty);
                    $("#select-" + i).find("select").val(previousQty)
                }) : f()))
            });
            n(this).find("._cart-remove-article").on("click", function() {
                var r = u.find("._cart-article-name")[0].childNodes[0].data.toString().replace("/", ""),
                    f = u.find("._cart-article-name")[0].childNodes[1].childNodes[0].data.toString(),
                    e = u.find("._cart-article-price").text(),
                    o = u.find("._cart-qty-input").val(),
                    s = u.attr("cart-item-id").toString(),
                    h = u.find("._cart-article-name").data("article-name"),
                    c = t,
                    n = t.translations().removeArticleConfirmMessage.replace("[ArticleName]", h);
                if (fixedShippingPrice.length != 0 && (n += t.getAmbassadorShippingChangeWarnAlert()), Confirm(n, null, function() {
                        c.remove(i)
                    }, function() {}), t.shoppingCartOptions.apiHost.includes("edilportale.com") || t.shoppingCartOptions.apiHost.includes("archiproducts.com")) try {
                    ga("ec:addProduct", {
                        id: s,
                        name: f,
                        brand: r,
                        price: e,
                        quantity: o
                    });
                    ga("ec:setAction", "remove")
                } catch (l) {}
            });
            n(this).find("._change-zipcode").on("click", function() {
                openChangeLocation(function() {
                    t.updateAll()
                })
            })
        });
        n("body").off("change", "#_change-cart");
        n("body").on("change", "#_change-cart", function() {
            shoppingCartAPI.changeCart(n(this).val())
        });
        n("body").off("change", "#_btn-new-cart");
        n("body").on("click", "#_btn-new-cart", function() {
            shoppingCartAPI.newCart()
        });
        this.bindOrderSummaryEvents();
        this.bindAmbassadorEvents();
        try {
            initTooltip()
        } catch (u) {}
        $("#ShoppingCart").foundation()
    },
    bindAmbassadorEvents: function() {
        var n = shoppingCart.getJquery(),
            t = this;
        n(".feeamb-tooltip").each(function() {
            var u = n(this),
                f = parseFloat(u.data("price").toString().replace(",", ".")),
                e = n(this).find(".call"),
                o = n(this).find(".feeamb-content-close"),
                i = n(this).find(".feeamb-amount"),
                r = n(this).find(".feeamb-percentage");
            e.on("click", function() {
                var n, f;
                t.closeAmbToolTip();
                n = i.data("reset");
                i.data("history", n);
                i.val(n);
                f = r.data("reset");
                r.data("history", f);
                r.val(f);
                u.find(".feeamb-content").addClass("show-content")
            });
            i.on("keyup focusout", function(n) {
                var t = n.keyCode,
                    u, e;
                t !== 8 && (u = parseFloat(i.val().replace(",", ".")), ((t < 96 || t > 105) && (t < 48 || t > 57) && t !== 188 && t !== 190 && t !== 110 || t === undefined) && (u.toString() === "NaN" || u < 0 ? (u = 0, i.val(i.data("history"))) : (feeAmbShow = u.toFixed(2).replace(".", ","), i.val(feeAmbShow), i.data("history", feeAmbShow))), e = ((f + u) / f - 1) * 100, r.val(e.toFixed(2).replace(".", ",")))
            });
            r.on("keyup focusout", function(n) {
                var t = n.keyCode,
                    u, e;
                t !== 8 && (u = parseFloat(r.val().replace(",", ".")), ((t < 96 || t > 105) && (t < 48 || t > 57) && t !== 188 && t !== 190 && t !== 110 || t === undefined) && (u.toString() === "NaN" || u < 0 ? (u = 0, r.val(u.data("history"))) : (feeAmbPercShow = u.toFixed(2).replace(".", ","), r.val(feeAmbPercShow), r.data("history", feeAmbPercShow))), e = f * u / 100, i.val(e.toFixed(2).replace(".", ",")))
            });
            u.find("._cart-fee-amb-button").on("click", function() {
                var f = n(this).data("itemid"),
                    r = parseFloat(i.val().replace(",", ".")),
                    u;
                (r.toString() === "NaN" || r < 0) && (r = 0, i.val(0));
                u = {
                    FeeAmb: r,
                    ShoppingCartItemId: f
                };
                shoppingCartAPI.updateFeeAmb(u, function(n) {
                    t.updateQuantitySuccess(n);
                    t.updateAll()
                }, t.updateQuantityFail)
            });
            o.on("click", function() {
                t.closeAmbToolTip()
            })
        })
    },
    closeAmbToolTip: function() {
        $(".feeamb-content").removeClass("show-content")
    },
    bindOrderSummaryEvents: function() {
        var t = this,
            n = shoppingCart.getJquery();
        n("._go-to-checkout-button").click(function(n) {
            if (!isUserLogged) try {
                ga("send", "event", {
                    eventCategory: "Test Click",
                    eventAction: "Popup Login pre_checkout",
                    eventLabel: "Popup Visualizzato"
                })
            } catch (n) {}
            var t = $(this).data("currency");
            shoppingCartAPI.goToCheckout(t);
            n.stopPropagation()
        });
        this.bindCouponEvent()
    },
    bindCouponEvent: function() {
        function i(i) {
            shoppingCartAPI.applyCoupon(i, "", function(i) {
                i.applied === !0 ? (typeof n.shoppingCartOptions.targetElementSelector == "undefined" ? n.refreshTotals(function() {
                    n.purchaseWizardDialog.hide();
                    n.showWizardPaymentModule()
                }) : n.show(n.shoppingCartOptions.targetElementSelector, function() {
                    n.purchaseWizardDialog.hide();
                    n.showWizardPaymentModule()
                }), t("._coupon-box").hide()) : (n.purchaseWizardDialog.hide(), Alert(i.message), t("._coupon-box").show())
            })
        }

        function r() {
            shoppingCartAPI.removeCoupon("", function(i) {
                i.applied === !0 ? (typeof n.shoppingCartOptions.targetElementSelector == "undefined" ? n.refreshTotals(function() {
                    n.purchaseWizardDialog.hide();
                    n.showWizardPaymentModule();
                    n.bindCouponEvent()
                }) : n.show(n.shoppingCartOptions.targetElementSelector, function() {
                    n.purchaseWizardDialog.hide();
                    n.showWizardPaymentModule();
                    n.bindCouponEvent()
                }), t("._coupon-box").show()) : (n.purchaseWizardDialog.hide(), Alert(i.message), t("._coupon-box").hide())
            })
        }
        var n = this,
            t = shoppingCart.getJquery(),
            u = t("input[name='coupon_code'");
        u.on("keypress", function(n) {
            n.which == 13 && $("._apply-coupon-button").trigger("click")
        });
        t("body").off("click", "._apply-coupon-button");
        t("body").on("click", "._apply-coupon-button", function(t) {
            t.preventDefault();
            var r = n.couponCode();
            typeof r == "string" && (r = r.trim());
            r.length === 0 && (u.val(""), Alert(n.translations().invalidCoupon));
            authenticationAPI.verifyAuthentication(function() {
                n.shoppingCartOptions.purchaseWizardMode ? (n.purchaseWizardDialog.show(n.translations().computeTotals), typeof stepNumber != "undefined" && (stepNumber === 1 || stepNumber === 2) ? (setApiCountryCodeBySelectedNation(), shoppingCartAPI.checkCart(shoppingCartAPI.cartApiOptions.countryCode, wizardParams.culture, function(t) {
                    t.Message != "" ? (n.purchaseWizardDialog.hide(), Confirm(t.Message, null, function() {
                        $("._delete-all-article-message").length === 0 && i(r)
                    }, null)) : (i(r), n.purchaseWizardDialog.hide())
                })) : i(r)) : i(r)
            }, function() {
                var t = "<div class='text-center margin-top-1 margin-bottom-2'>" + n.translations().applyCouponYouMustLogin + "<\/div>",
                    i = "<button class='button large expanded' onclick='shoppingCart.showLoginDialog(\"" + r + "\", 1)' class='button'>" + n.translations().enter + "<\/button>";
                Alert(i, t, null, {
                    containerClass: "padding-2",
                    titleTag: "h5",
                    messageTag: "div"
                })
            })
        });
        t("._remove-coupon-button").click(function() {
            Confirm("", n.translations().removeCouponConfirmMessage, function() {
                n.shoppingCartOptions.purchaseWizardMode ? (n.purchaseWizardDialog.show(n.translations().computeTotals), typeof stepNumber != "undefined" && (stepNumber == 1 || stepNumber == 2) ? (setApiCountryCodeBySelectedNation(), shoppingCartAPI.checkCart(shoppingCartAPI.cartApiOptions.countryCode, wizardParams.culture, function(t) {
                    t.Message != "" ? (n.purchaseWizardDialog.hide(), Confirm(t.Message, null, function() {
                        $("._delete-all-article-message").length == 0 && r()
                    }, null)) : (r(), n.purchaseWizardDialog.hide())
                })) : r()) : r()
            }, function() {})
        });
        t("._remove-points-button").click(function() {
            confirm(n.translations().removePointsConfirmMessage) == !0 && (n.purchaseWizardDialog.show(n.translations().computeTotals), shoppingCartAPI.removePoints("", function(i) {
                i.Applied == !0 ? (n.refreshTotals(function() {
                    n.purchaseWizardPointCheck(!1);
                    n.purchaseWizardDialog.hide();
                    n.showWizardPaymentModule()
                }), t("._coupon-box").hide()) : (n.purchaseWizardDialog.hide(), alert(i.Message), t("._coupon-box").show())
            }))
        })
    },
    showLoginDialog: function(n, t) {
        typeof $("#dialog-master").dialog == "function" && $("#dialog-master").dialog("close");
        try {
            AlertClose()
        } catch (u) {}
        var i = typeof getCurrentPageUrl != "undefined" ? getCurrentPageUrl() : document.location.href,
            r = i.indexOf("?") > 0 ? "&" : "?";
        typeof t == "undefined" || t === 1 ? typeof loginDialog != "undefined" ? loginDialog.show(encodeURI(i + r + "couponcode=" + n)) : ShowLoginDialog(encodeURI(i + r + "couponcode=" + n)) : t === 2 && ShowRegisterDialog(encodeURI(i + r + "couponcode=" + n))
    },
    showWizardPaymentModule: function() {
        typeof wizardModule != "undefined" && wizardModule.paymentMethosOptionsBox().toggle(wizardModule.getTotal() != 0)
    },
    purchaseWizardDialog: {
        show: function(n) {
            typeof dialog != "undefined" && dialog.show(n)
        },
        hide: function() {
            typeof dialog != "undefined" && dialog.hide()
        }
    },
    purchaseWizardPointCheck: function(n) {
        var t = $("._apply-points");
        t.length !== 0 && t.prop("checked", n)
    },
    couponCode: function() {
        var n = shoppingCart.getJquery();
        return n("input[name='coupon_code']").val()
    },
    updateAll: function() {
        var n = this;
        n.show(n.shoppingCartOptions.targetElementSelector, function() {
            n.purchaseWizardDialog.hide();
            n.showWizardPaymentModule()
        })
    },
    show: function(n, t, i) {
        var r = this,
            u, f;
        this.shoppingCartOptions.targetElementSelector = n;
        u = shoppingCart.getJquery();
        f = typeof i != "undefined" && i ? "share" : "full";
        shoppingCartAPI.getCart(f, function(i) {
            u(n).html(i.html);
            r.bindEvent();
            r.shoppingCartOptions.disableCoupon && r.shoppingCartOptions.disableCoupon === !0 && u("._coupon-box").hide();
            typeof t == "function" && t(i)
        }, function(n) {
            alert(n)
        })
    },
    showCartFragments: function(n, t, i) {
        var e = this,
            u, f, r = shoppingCart.getJquery();
        this.shoppingCartOptions.articleListElementSelector = n;
        this.shoppingCartOptions.totalsElementSelector = t;
        this.shoppingCartOptions.purchaseWizardMode = !0;
        shoppingCartAPI.getCart("wizard", function(o) {
            u = r(o.html).find("._shopping-cart-article-list").html();
            f = r(o.html).find("._shopping-cart-totals-box").html();
            r(n).empty();
            r(n).html(u);
            r(t).empty();
            r(t).html(f);
            e.bindEvent();
            typeof i == "function" && i(o)
        }, function(n) {
            alert(n)
        })
    },
    refreshCartFragments: function(n) {
        this.shoppingCartOptions.articleListElementSelector && this.shoppingCartOptions.totalsElementSelector && this.showCartFragments(this.shoppingCartOptions.articleListElementSelector, this.shoppingCartOptions.totalsElementSelector, function() {
            typeof n == "function" && n(data)
        })
    },
    showArticleList: function(n, t) {
        var r = this,
            i = shoppingCart.getJquery();
        this.shoppingCartOptions.articleListElementSelector = targetElementSelector;
        this.shoppingCartOptions.purchaseWizardMode = !0;
        shoppingCartAPI.getCart("full", function(n) {
            var u = i(n.html).find("._shopping-cart-article-list").html();
            i(targetElementSelector).empty();
            i(targetElementSelector).html(u);
            r.bindEvent();
            typeof t == "function" && t(n)
        }, function(n) {
            alert(n)
        })
    },
    showTotals: function(n, t) {
        var i = shoppingCart.getJquery(),
            r = this;
        this.shoppingCartOptions.totalsElementSelector = n;
        shoppingCartAPI.getCart("wizard", function(u) {
            var f = i(u.html).find("._shopping-cart-totals-box").html();
            i(n).empty();
            i(n).html(f);
            r.bindOrderSummaryEvents();
            typeof t == "function" && t(u)
        }, function(n) {
            alert(n)
        })
    },
    refreshArticleList: function() {
        this.shoppingCartOptions.articleListElementSelector && this.showArticleList(this.shoppingCartOptions.articleListElementSelector, null)
    },
    refreshTotals: function(n) {
        this.shoppingCartOptions.totalsElementSelector && this.showTotals(this.shoppingCartOptions.totalsElementSelector, function() {
            typeof n == "function" && n()
        })
    },
    refreshArticle: function(n) {
        var t = shoppingCart.getJquery(),
            i = t("._cart-article-container[cart-item-id=" + n + "] ._cart-qty-input").val(),
            r = this,
            u = {
                Quantity: i,
                ShoppingCartItemId: n
            };
        shoppingCartAPI.updateQuantity(u, function() {
            r.refresh()
        }, null)
    },
    remove: function(n) {
        var t = this,
            i = {
                ShoppingCartItemId: n
            },
            r = $("._cart-article-container[cart-item-id=" + n + "]").data("seller-id"),
            u = $("._cart-article-container[data-seller-id=" + r + "]").length > 1;
        shoppingCartAPI.deleteCartArticle(i, function(n) {
            n.deleted || u ? t.show(t.shoppingCartOptions.targetElementSelector, function() {
                t.purchaseWizardDialog.hide();
                t.showWizardPaymentModule();
                t.updateCartQuantityNumber()
            }) : t.deleteCartArticleSuccess(n)
        }, t.deleteCartArticleFail)
    },
    updateQuantitySuccess: function(n) {
        var i = shoppingCart.getJquery(),
            o = this;
        if (n.updated === !0) {
            var r = n.cartItemId,
                t = i("._cart-article-container[cart-item-id=" + r + "]"),
                u = i("._order-summary"),
                f = t.find("._cart-qty-input").attr("max-quantity"),
                e = i(".alert.alert-danger").length;
            parseInt(n.articleQuantity) <= parseInt(f) && t.find("._shopping-cart-variation").closest(".alert.alert-danger").remove();
            t.find("._cart-qty-input").val(n.articleQuantity);
            t.find("._qty-input").val(n.articleQuantity);
            t.find("._cart-article-total-price").html(n.articleTotalPrice + (typeof n.toEuro != "undefined" ? "<small><\/br>(" + n.toEuro.articleTotalPrice + ")<\/small>" : ""));
            t.find("._cart-article-shipping-price").html(n.shippingPrice);
            n.multipleFreeShipping ? t.find("._cart-multiple-article-label").addClass("hide") : t.find("._cart-multiple-article-label").removeClass("hide");
            typeof n.cartProfit != "undefined" && i("#_cartProfit-content").html(n.cartProfit);
            try {
                initTooltip()
            } catch (s) {}
            e > 0 ? shoppingCart.show(shoppingCart.shoppingCartOptions.targetElementSelector, function() {
                shoppingCart.purchaseWizardDialog.hide();
                shoppingCart.showWizardPaymentModule()
            }) : (shoppingCart.refreshSummaryTotals(u, n), shoppingCart.changed = !0, typeof shoppingCartMenu == "object" && shoppingCartMenu.refreshCartArticlesQuantity(), typeof shoppingCartSettings != "undefined" && i(shoppingCartSettings.totalArticlesQuantitySelector).attr("number", n.cartArticleCount))
        }
    },
    refresh: function() {
        this.shoppingCartOptions.targetElementSelector && this.show(this.shoppingCartOptions.targetElementSelector);
        this.refreshCartFragments()
    },
    updateQuantityFail: function(n) {
        alert(n)
    },
    deleteCartArticleSuccess: function(n) {
        var f = this,
            t = shoppingCart.getJquery();
        if (n.Deleted == !0) {
            var r = n.CartItemId,
                i = t("._cart-article-container[cart-item-id=" + r + "]"),
                u = t("._order-summary");
            i.slideUp(300, function() {
                i.removeClass("_cart-article-container");
                typeof shoppingCartMenu == "object" && shoppingCartMenu.refresh();
                shoppingCart.refreshSummaryTotals(u, n);
                t("._cart-article-container").length == 0 && (t("._shoppingcart-full-with-totals").hide(), t("._empty-cart-message").removeClass("dn"));
                typeof shoppingCartSettings != "undefined" && t(shoppingCartSettings.totalArticlesQuantitySelector).attr("number", n.CartArticleCount);
                shoppingCart.changed = !0;
                t(this).remove()
            })
        }
    },
    refreshSummaryTotals: function(n, t) {
        var i = this,
            r = shoppingCart.getJquery();
        n.find("._cart-subtotal").html(t.cartSubtotal);
        n.find("._cart-subtotal-tax").html(t.cartSubtotalTax);
        n.find("._cart-total-shipping-price").html(t.cartTotalShippingPrice);
        t.discountIsValid != this.haveDiscount ? (i.show(i.shoppingCartOptions.targetElementSelector, function() {
            i.purchaseWizardDialog.hide();
            i.showWizardPaymentModule()
        }), i.haveDiscount = t.discountIsValid) : t.discountIsValid ? (n.find("._cart-discount-code-amount").html("- " + t.couponDiscount), n.find("._cart-discount-content").show(), r("._coupon-box").hide()) : (n.find("._cart-discount-content").hide(), r("._canUsePromo").hide(), r("._coupon-box").show(), t.discountMsg && alert(t.discountMsg));
        n.find("._cart-discount-point-amount").html("-" + t.credits);
        n.find("._cart-total-price").html(t.cartTotalPrice + (typeof t.toEuro != "undefined" ? "<small><\/br>(" + t.toEuro.cartTotalPrice + ")<\/small>" : ""));
        n.find("._cart-total-shipping-price").html(t.totalArticlesShippingPrice);
        typeof t.cartReward != "undefined" ? n.find("._cart-reward").html(t.cartReward + (typeof t.toEuro != "undefined" ? "<small><\/br>(" + t.toEuro.cartReward + ")<\/small>" : "")) : n.find("._cart-reward").html("0,00 €")
    },
    articlesCount: function() {
        var n = shoppingCart.getJquery();
        return n("._cart-article-container").length
    },
    deleteCartArticleFail: function(n) {
        alert(n)
    },
    getAmbassadorShippingChangeWarnAlert: function() {
        return "<div class='alert-bordered alert-bordered-warning margin-top-1'>" + this.translations().ambassadorShippingChangeWarn + "<\/div>"
    },
    getJquery: function() {
        return typeof $j != "undefined" ? $j : $
    }
};